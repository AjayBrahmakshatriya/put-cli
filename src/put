#!/usr/bin/python
import json
import os
import os.path
import sys
import urllib2
import urllib
config_file_path = os.path.expanduser("~/.put-cli/put-cli.json")
sessions_path = os.path.expanduser("~/.put-cli/sessions/")
autocomplete_path = os.path.expanduser("~/.put-cli/autocomplete/")
access_token = ""
terminal_session={}

def check_config():
	global access_token
	if not os.path.exists(config_file_path):
		print "Your config file does not exist. You might want to build and install the package again"
		exit(1)
	config_file = open(config_file_path,"r")
	config_json = config_file.read()
	config_file.close()
	config_json = json.loads(config_json)
	if not "access_token" in config_json or config_json["access_token"] == "":
		print "Your config file doesn not have a access_token set. Please follow instructions in README and get a valid access token"
		exit(1)
	access_token = config_json["access_token"]

def create_terminal_session(ppid):
	global terminal_session
	terminal_session = {"pwd":[], "pwd_id":[0]}
	terminal_session_string = json.dumps(terminal_session, sort_keys=True, indent=4, separators=(',', ': '))
	terminal_session_file = open(sessions_path+str(ppid),"w")
	terminal_session_file.write(terminal_session_string)
	terminal_session_file.close()

def read_terminal_session(ppid):
	global terminal_session
	terminal_session_file = open(sessions_path+str(ppid),"r")
	terminal_session_json = terminal_session_file.read()
	terminal_session_file.close()
	terminal_session = json.loads(terminal_session_json)

def write_terminal_session():
	ppid=os.getppid()
	global terminal_session
	terminal_session_string = json.dumps(terminal_session, sort_keys=True, indent=4, separators=(',', ': '))
	terminal_session_file = open(sessions_path+str(ppid),"w")
	terminal_session_file.write(terminal_session_string)
	terminal_session_file.close()

def check_terminal_session():
	if not os.path.exists(sessions_path):
		os.mkdir(sessions_path)
	ppid = os.getppid()
	if not os.path.exists(sessions_path+str(ppid)):
		create_terminal_session(ppid)
	else:
		read_terminal_session(ppid)

def check_autocomplete():
	if not os.path.exists(autocomplete_path):
		os.mkdir(autocomplete_path)
	ppid = os.getppid()

def api_call(path,data={}):
	global access_token
	if "?" not in path:
		path = path+"?"
	path = "https://api.put.io/v2/"+path+"&oauth_token="+access_token
	try:
		if data == {}:
			response = urllib2.urlopen(path)
		else:
			data = urllib.urlencode(data)
			request = urllib2.Request(path, data)
			response = urllib2.urlopen(request)
	except urllib2.HTTPError, err:
		if err.code == 400:
			print "BAD REQUEST - Check the access_token in config or the parameters"
			exit(1)
		else:
			print err
			print "Some error occured while connecting to put.io server."
			exit(1)
	response_json = json.loads(response.read())
	if response_json["status"] == "ERROR":
		if response_json["error_type"] == "invalid_grant":
			print "The access_token you have specified in "+config_file_path+" is not valid. Check the README to get the correct access_token"
			exit(1)
	return response_json

def escape_filename(filename):
	for c in "\!\"$&'()*,:;<=>?@[]^`{|} ":
		filename=filename.replace(c,"\\\\"+c)
	return filename

def dump_autocomplete(files):
	ppid = os.getppid()
	autocomplete_file = open(autocomplete_path+str(ppid),"w")
	for file_info in files:
		autocomplete_file.write(escape_filename(file_info["name"])+"\n")
	autocomplete_file.close()

def get_folder_list(folder_id):
	response_json = api_call("files/list?parent_id=" + str(folder_id))
	return response_json

def get_folder_id(folder_name):
	response_json = get_folder_list(terminal_session["pwd_id"][-1])
	files = response_json["files"]
	folder_id = -1

	for file_info in files:
		if file_info["name"]==folder_name and file_info["file_type"]==0:
			folder_id = file_info["id"]
			break

	return folder_id

def process_command(command):
	global terminal_session
	if command == "pwd":
		output_string="/"
		for path in terminal_session["pwd"]:
			output_string+=path+"/"
		print output_string
	elif command == "ls":
		ls_target_id = get_folder_id(sys.argv[2]) if len(sys.argv) >=3 else terminal_session["pwd_id"][-1]
		if ls_target_id == -1:
			print "The folder name you entered does not exist"
			exit(0)
		response_json = get_folder_list(ls_target_id)
		files = response_json["files"]
		for file_info in files:
			if file_info["file_type"]==0:
				print "[+]"+file_info["name"]
			else:
				print file_info["name"]

		#if current folder, refresh the folder listing for autocomplete
		if ls_target_id == terminal_session["pwd_id"][-1]:
			dump_autocomplete(files)
	elif command == "cd":
		cd_target = sys.argv[2] if len(sys.argv) >= 3 else '/'
		if cd_target == "..":
			if terminal_session["pwd_id"][-1]==0:
				return
			terminal_session["pwd"]=terminal_session["pwd"][:-1]
			terminal_session["pwd_id"]=terminal_session["pwd_id"][:-1]
		elif cd_target == "/":
			terminal_session["pwd"]=[]
			terminal_session["pwd_id"]=[0]
		else:
			cd_target_id = get_folder_id(cd_target)
			if cd_target_id == -1:
				print "The folder name you entered does not exist"
				exit(0)
			terminal_session["pwd"]=terminal_session["pwd"]+[cd_target]
			terminal_session["pwd_id"]=terminal_session["pwd_id"]+[cd_target_id]
		write_terminal_session()
		response_json = get_folder_list(terminal_session["pwd_id"][-1])
		dump_autocomplete(response_json["files"])
	elif command == "transfers":
		sub_command = sys.argv[2] if len(sys.argv) >= 3 else "show"
		if sub_command == "show":
			response_json = api_call("transfers/list")
			for transfer in response_json["transfers"]:
				if transfer["percent_done"] == 100:
					print "("+str(transfer["percent_done"])+"%)",transfer["name"]
				else:
					print "("+str(transfer["percent_done"])+"% - "+str(float(transfer["down_speed"])/1024/1024)+" mb/s)",transfer["name"]
		elif sub_command == "clear":
			response_json = api_call("transfers/clean",{"method":"POST"})
			if response_json["status"] == "OK":
				print "All completed transfers cleared"
			else:
				print "Some error occurred while clearing the transfers"
		else:
			print "Invalid sub comamnd : "+sub_command+". Please check usage using put transfers --help"
	elif command == "add":
		if len(sys.argv) < 3:
			print "Missing url. Please check usage using put add --help"
			exit(1)
		add_url = sys.argv[2]
		parameters = {"url":add_url, "save_parent_id":terminal_session["pwd_id"][-1]}
		response_json = api_call("transfers/add",parameters)
		if response_json["status"] == "OK":
			print "Successfully added download link to pwd. Please check transfers"
		else:
			print "Error while addying transfer : "+response_json["transfer"]["error_message"]
	else:
		print "Invalid command : "+command+". Please check usage using put --help"

def main_routine():
	check_config()
	check_terminal_session()
	check_autocomplete()
	if len(sys.argv) < 2:
		print "Please specify command:"
		exit(0)
	command = sys.argv[1]
	process_command(command)

if __name__ == "__main__" :
	main_routine()
